{"ast":null,"code":"import { useNavigate } from 'react-router-dom';\nimport Web3 from 'web3';\nconst getWeb3 = () => new Promise((resolve, reject) => {\n  window.addEventListener('load', async () => {\n    if (window.ethereum) {\n      const web3 = new Web3(window.ethereum);\n      try {\n        // Request account access if needed\n        await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        resolve(web3);\n\n        // Listen for account changes\n        window.ethereum.on('accountsChanged', accounts => {\n          if (accounts.length === 0) {\n            console.log('Account disconnected');\n            window.location.href = '/';\n          } else {\n            // Reload upon account change\n            console.log('Account changed:', accounts[0]);\n            window.location.reload();\n          }\n        });\n        window.ethereum.on('chainChanged', chainId => {\n          console.log('Chain changed to', chainId);\n          window.location.reload();\n        });\n      } catch (error) {\n        reject(error);\n      }\n    }\n    // Legacy dapp browsers...\n    else if (window.web3) {\n      // Use Mist/MetaMask's provider.\n      const web3 = window.web3;\n      console.log('Injected web3 detected.');\n      resolve(web3);\n    } else {\n      const provider = new Web3.providers.HttpProvider('http://127.0.0.1:7545');\n      const web3 = new Web3(provider);\n      console.log('No web3 instance injected, using Local web3.');\n      resolve(web3);\n    }\n  });\n});\nexport default getWeb3;","map":{"version":3,"names":["useNavigate","Web3","getWeb3","Promise","resolve","reject","window","addEventListener","ethereum","web3","request","method","on","accounts","length","console","log","location","href","reload","chainId","error","provider","providers","HttpProvider"],"sources":["/Users/bar-study/study-workspace/BlockchainProject/final-proj/client/src/utils/getWeb3.js"],"sourcesContent":["import { useNavigate } from 'react-router-dom';\nimport Web3 from 'web3';\n\nconst getWeb3 = () =>\n\tnew Promise((resolve, reject) => {\n\t\twindow.addEventListener('load', async () => {\n\t\t\tif (window.ethereum) {\n\t\t\t\tconst web3 = new Web3(window.ethereum);\n\t\t\t\ttry {\n\t\t\t\t\t// Request account access if needed\n\t\t\t\t\tawait window.ethereum.request({\n\t\t\t\t\t\tmethod: 'eth_requestAccounts',\n\t\t\t\t\t});\n\t\t\t\t\tresolve(web3);\n\n\t\t\t\t\t// Listen for account changes\n\t\t\t\t\twindow.ethereum.on('accountsChanged', (accounts) => {\n\t\t\t\t\t\tif (accounts.length === 0) {\n\t\t\t\t\t\t\tconsole.log('Account disconnected');\n\t\t\t\t\t\t\twindow.location.href = '/';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Reload upon account change\n\t\t\t\t\t\t\tconsole.log('Account changed:', accounts[0]);\n\t\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\twindow.ethereum.on('chainChanged', (chainId) => {\n\t\t\t\t\t\tconsole.log('Chain changed to', chainId);\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t} catch (error) {\n\t\t\t\t\treject(error);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Legacy dapp browsers...\n\t\t\telse if (window.web3) {\n\t\t\t\t// Use Mist/MetaMask's provider.\n\t\t\t\tconst web3 = window.web3;\n\t\t\t\tconsole.log('Injected web3 detected.');\n\t\t\t\tresolve(web3);\n\t\t\t} else {\n\t\t\t\tconst provider = new Web3.providers.HttpProvider(\n\t\t\t\t\t'http://127.0.0.1:7545'\n\t\t\t\t);\n\t\t\t\tconst web3 = new Web3(provider);\n\t\t\t\tconsole.log('No web3 instance injected, using Local web3.');\n\t\t\t\tresolve(web3);\n\t\t\t}\n\t\t});\n\t});\n\nexport default getWeb3;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,IAAI,MAAM,MAAM;AAEvB,MAAMC,OAAO,GAAGA,CAAA,KACf,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;EAChCC,MAAM,CAACC,gBAAgB,CAAC,MAAM,EAAE,YAAY;IAC3C,IAAID,MAAM,CAACE,QAAQ,EAAE;MACpB,MAAMC,IAAI,GAAG,IAAIR,IAAI,CAACK,MAAM,CAACE,QAAQ,CAAC;MACtC,IAAI;QACH;QACA,MAAMF,MAAM,CAACE,QAAQ,CAACE,OAAO,CAAC;UAC7BC,MAAM,EAAE;QACT,CAAC,CAAC;QACFP,OAAO,CAACK,IAAI,CAAC;;QAEb;QACAH,MAAM,CAACE,QAAQ,CAACI,EAAE,CAAC,iBAAiB,EAAGC,QAAQ,IAAK;UACnD,IAAIA,QAAQ,CAACC,MAAM,KAAK,CAAC,EAAE;YAC1BC,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;YACnCV,MAAM,CAACW,QAAQ,CAACC,IAAI,GAAG,GAAG;UAC3B,CAAC,MAAM;YACN;YACAH,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEH,QAAQ,CAAC,CAAC,CAAC,CAAC;YAC5CP,MAAM,CAACW,QAAQ,CAACE,MAAM,CAAC,CAAC;UACzB;QACD,CAAC,CAAC;QAEFb,MAAM,CAACE,QAAQ,CAACI,EAAE,CAAC,cAAc,EAAGQ,OAAO,IAAK;UAC/CL,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEI,OAAO,CAAC;UACxCd,MAAM,CAACW,QAAQ,CAACE,MAAM,CAAC,CAAC;QACzB,CAAC,CAAC;MACH,CAAC,CAAC,OAAOE,KAAK,EAAE;QACfhB,MAAM,CAACgB,KAAK,CAAC;MACd;IACD;IACA;IAAA,KACK,IAAIf,MAAM,CAACG,IAAI,EAAE;MACrB;MACA,MAAMA,IAAI,GAAGH,MAAM,CAACG,IAAI;MACxBM,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;MACtCZ,OAAO,CAACK,IAAI,CAAC;IACd,CAAC,MAAM;MACN,MAAMa,QAAQ,GAAG,IAAIrB,IAAI,CAACsB,SAAS,CAACC,YAAY,CAC/C,uBACD,CAAC;MACD,MAAMf,IAAI,GAAG,IAAIR,IAAI,CAACqB,QAAQ,CAAC;MAC/BP,OAAO,CAACC,GAAG,CAAC,8CAA8C,CAAC;MAC3DZ,OAAO,CAACK,IAAI,CAAC;IACd;EACD,CAAC,CAAC;AACH,CAAC,CAAC;AAEH,eAAeP,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module"}